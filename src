#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_URL_LEN 100

typedef struct Node {
    char url[MAX_URL_LEN];
    struct Node *prev, *next;
} Node;

Node *current = NULL;

void visit(char *url) {
    if (current && current->next) {
        Node *temp = current->next;
        Node *toDelete;
        while (temp) {
            toDelete = temp;
            temp = temp->next;
            free(toDelete);
        }
        current->next = NULL;
    }

    Node *newNode = (Node *)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed.\n");
        return;
    }

    strcpy(newNode->url, url);
    newNode->prev = current;
    newNode->next = NULL;

    if (current)
        current->next = newNode;

    current = newNode;

    printf("Visited: %s\n", current->url);
}

void back() {
    if (current && current->prev) {
        current = current->prev;
        printf("Back to: %s\n", current->url);
    } else {
        printf("No previous page.\n");
    }
}

void forward() {
    if (current && current->next) {
        current = current->next;
        printf("Forward to: %s\n", current->url);
    } else {
        printf("No next page.\n");
    }
}

void show_history() {
    Node *temp = current;
    while (temp && temp->prev)
        temp = temp->prev;

    printf("\nBrowsing History:\n");
    while (temp) {
        if (temp == current)
            printf("-> %s (current)\n", temp->url);
        else
            printf("-> %s\n", temp->url);
        temp = temp->next;
    }
}

void clear_history() {
    Node *temp;
    while (current && current->prev)
        current = current->prev;

    while (current) {
        temp = current;
        current = current->next;
        free(temp);
    }

    current = NULL;
    printf("Browsing history cleared.\n");
}

void delete_page(char *url) {
    Node *temp = current;
    while (temp && temp->prev)
        temp = temp->prev;

    while (temp) {
        if (strcmp(temp->url, url) == 0) {
            if (temp->prev)
                temp->prev->next = temp->next;
            if (temp->next)
                temp->next->prev = temp->prev;

            if (temp == current) {
                if (temp->prev)
                    current = temp->prev;
                else
                    current = temp->next;
            }

            free(temp);
            printf("Deleted page: %s\n", url);
            return;
        }
        temp = temp->next;
    }

    printf("Page not found: %s\n", url);
}

int main() {
    int choice;
    char url[MAX_URL_LEN];

    do {
        printf("\n========== Mini Browser Simulator ==========\n");
        printf("1. Visit new page\n");
        printf("2. Back\n");
        printf("3. Forward\n");
        printf("4. Show History\n");
        printf("5. Clear History\n");
        printf("6. Exit\n");
        printf("7. Delete a page by URL\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter URL: ");
                scanf("%s", url);
                visit(url);
                break;
            case 2:
                back();
                break;
            case 3:
                forward();
                break;
            case 4:
                show_history();
                break;
            case 5:
                clear_history();
                break;
            case 6:
                printf("Exiting browser.\n");
                clear_history();
                break;
            case 7:
                printf("Enter URL to delete: ");
                scanf("%s", url);
                delete_page(url);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }

    } while (choice != 6);

    return 0;
}
